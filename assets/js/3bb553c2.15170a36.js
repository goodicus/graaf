"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[748],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(r),h=o,d=p["".concat(l,".").concat(h)]||p[h]||m[h]||a;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},2073:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:1},i="Bron-Kerbosch algorithm",c={unversionedId:"algorithms/clique-detection/bron_kerbosch",id:"algorithms/clique-detection/bron_kerbosch",title:"Bron-Kerbosch algorithm",description:"Bron-Kerbosch algorithm finding all maximal cliques in an undirected graph. A clique is a subset of vertices such that",source:"@site/docs/algorithms/clique-detection/bron_kerbosch.md",sourceDirName:"algorithms/clique-detection",slug:"/algorithms/clique-detection/bron_kerbosch",permalink:"/graaf/docs/algorithms/clique-detection/bron_kerbosch",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/algorithms/clique-detection/bron_kerbosch.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"algorithmSidebar",previous:{title:"Clique Detection",permalink:"/graaf/docs/category/clique-detection"},next:{title:"Graph Coloring Algorithms",permalink:"/graaf/docs/category/graph-coloring-algorithms"}},l={},s=[{value:"Syntax",id:"syntax",level:2}],u={toc:s},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"bron-kerbosch-algorithm"},"Bron-Kerbosch algorithm"),(0,o.kt)("p",null,"Bron-Kerbosch algorithm finding all maximal cliques in an undirected graph. A clique is a subset of vertices such that\nevery two distinct vertices are adjacent to each other.\nThe maximal clique is the subset of vertices of an undirected graph where no additional vertex can be added\ndue to the complete connectivity rule. The algorithm lists all maximum cliques of an undirected graph."),(0,o.kt)("p",null,"The worst-case run time of the algorithm is 3",(0,o.kt)("sup",null,"V/3"),".\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bron%E2%80%93Kerbosch_algorithm#Worst-case_analysis"},"wikipedia")),(0,o.kt)("h2",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename V, typename E>\nstd::vector<std::vector<vertex_id_t>> bron_kerbosch(\n    const graph<V, E, graph_type::UNDIRECTED>& graph);\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"graph")," The graph to extract maximal cliques."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"return")," Returns 2D vector of vertices each vector represent set of vertices that form clique.")))}m.isMDXComponent=!0}}]);