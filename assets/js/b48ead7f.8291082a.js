"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[358],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),g=o,d=u["".concat(i,".").concat(g)]||u[g]||m[g]||a;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=g;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2909:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},s="Kosaraju's Strongly Connected Components",c={unversionedId:"algorithms/strongly-connected-components/kosarajus",id:"algorithms/strongly-connected-components/kosarajus",title:"Kosaraju's Strongly Connected Components",description:"Kosaraju's algorithm computes the Strongly Connected Components (SCCs) of a directed graph. An SCC is a subset of vertices",source:"@site/docs/algorithms/strongly-connected-components/kosarajus.md",sourceDirName:"algorithms/strongly-connected-components",slug:"/algorithms/strongly-connected-components/kosarajus",permalink:"/graaf/docs/algorithms/strongly-connected-components/kosarajus",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/algorithms/strongly-connected-components/kosarajus.md",tags:[],version:"current",frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"Strongly Connected Component Algorithms",permalink:"/graaf/docs/category/strongly-connected-component-algorithms"},next:{title:"Tarjan's Strongly Connected Components",permalink:"/graaf/docs/algorithms/strongly-connected-components/tarjan"}},i={},l=[{value:"Syntax",id:"syntax",level:2}],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"kosarajus-strongly-connected-components"},"Kosaraju's Strongly Connected Components"),(0,o.kt)("p",null,"Kosaraju's algorithm computes the Strongly Connected Components (SCCs) of a directed graph. An SCC is a subset of vertices\nin the graph for which every vertex is reachable from every other vertex in the subset, i.e. there exists a path between\nall pairs of vertices for the subset of vertices."),(0,o.kt)("p",null,"Kosaraju's algorithm runs in ",(0,o.kt)("inlineCode",{parentName:"p"},"O(|V| + |E|)")," for directed graphs, where ",(0,o.kt)("inlineCode",{parentName:"p"},"|V|")," the number of vertices and ",(0,o.kt)("inlineCode",{parentName:"p"},"|E|")," is the\nnumber of edges in the graph. So it runs in linear time."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm"},"wikipedia")),(0,o.kt)("h2",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename V, typename E>\nsccs_t kosarajus_strongly_connected_components(const directed_graph<V, E>& graph);\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"graph")," The graph for which to compute SCCs."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"return")," A type consisting of a vector of vectors representing SCCs.")))}m.isMDXComponent=!0}}]);